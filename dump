#!/usr/bin/env racket
;; -*- scheme  -*-
#lang racket

(require "common.rkt"
         "compiler/compile.rkt"
         "compiler/assemble.rkt"
         "compiler/bootstream.rkt")

(define bootstream? (make-parameter #f))
(define symbols? (make-parameter #f))

(define input-file
  (command-line
   #:once-each
   [("-b" "--bootstream") "print bootstream"
    (bootstream? #t)]
   [("-s" "--symbols") "include symboltable"
    (symbols? #t)]
   #:args (filename)
   filename))

(define (comma-join things)
  (when (vector? things)
    (set! things (vector->list things)))
  (string-join (for/list ((thing things))
                 (cond ((string? thing)
                        thing)
                       ((number? thing)
                        (number->string thing))
                                        ;(else (raise "invalid thing"))
                       (else (format "~a" thing))
                       ))
               ","))

(define (compiled->json compiled)
  (comma-join
   (for/list ((node compiled))
     (format "'~a' : [~a]"
             (node-coord node)
             (comma-join (let ((mem (node-mem node)))
                           (for/list ((i (range (node-len node))))
                             (let ((word (vector-ref mem i)))
                               (if (vector? word)
                                   (format "[~a]"
                                           (comma-join (for/list ((w word))
                                                         (format "'~a'" w))))
                                   word)))))))))

(define (boot-descriptors->json compiled)
  (comma-join
   (for/list ((node compiled))
     (format " '~a' : {~a}"
             (node-coord node)
             (comma-join (list (format "'a' : ~a" (or (node-a node) "None"))
                               (format "'b' : ~a" (or (node-b node) "None"))
                               (format "'io' : ~a"(or (node-io node) "None"))
                               (format "'p' : ~a" (or (node-p node) "None"))
                               (format "\n'stack' : ~a \n"
                                       (if (node-stack node)
                                           (format "[~a]"
                                                   (comma-join (node-stack node)))
                                           "None"))))))))
(define (symbols->json compiled)
  (let ((syms '())
        (symbols #f))
    (for/list ((node compiled))
      (set! symbols (node-symbols node))
      (unless (null? symbols)
        (push syms
              (format "'~a' : {~a}"
                      (node-coord node)
                      (comma-join
                       (for/list ((sym (node-symbols node)))
                         (format "'~a' : {'address' : ~a, 'line' : ~a, 'col' : ~a}"
                                 (symbol-name sym) (symbol-address sym)
                                 (symbol-line sym) (symbol-col sym))))))))
    (comma-join syms)))

(define (assembled->json assembled)
  (comma-join (for/list ((node assembled))
                (format "'~a' : [~a]"
                        (node-coord node)
                        (comma-join (let ((mem (node-mem node)))
                                      (for/list ((i (range (node-len node))))
                                        (vector-ref mem i))))))))

(define compiled (compile (file->string input-file)))
(define compiled-json (compiled->json compiled))
(define boot-descriptors-json (boot-descriptors->json compiled))
(define symbols-json (symbols->json compiled))
(define assembled (assemble compiled))
(define assembled-json (assembled->json assembled))
(define bootstream (sget-convert (make-bootstream assembled)))
;;(define bootstream (make-bootstream assembled))

(printf "{~a}\n"
        (comma-join
         (list (format "'file' : '~a'\n" input-file)
               (format "'compiled': {~a}\n" compiled-json)
               (format "'boot-descriptors' : {~a}\n" boot-descriptors-json)
               (format "'symbols': {~a}\n" symbols-json)
               (format "'assembled': {~a}\n" assembled-json)
               (format "'bootstream' : [~a] " (comma-join bootstream))
               )))
