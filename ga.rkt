#lang racket

(require compatibility/defmacro
         "compiler/compile.rkt")

(provide (all-defined-out))

(define chips (list))

(define op-replacements (make-hash '(("ret" . ";")
                                     ("nop" . "."))))

(struct GA144 (name nodes)  #:mutable #:transparent)
(struct Node (coord words)  #:mutable #:transparent)
(struct Word (name body)  #:mutable #:transparent)

(defmacro chip (name nodes)
  `(begin (define ,name (GA144 ,(symbol->string name) #f))
          (add-chip ,name)
          (let ((current-chip ,name)
                (current-node-list (list)))
            ,@nodes
            (set-GA144-nodes! current-chip (reverse current-node-list)))))

(defmacro node (cord words)
  `(let* ((node (Node ,cord #f))
          (current-node node)
          (current-word-list (list)))
     (set! current-node-list (cons current-node current-node-list))
     ,@words
     (set-Node-words! current-node (reverse current-word-list))))

(defmacro : (name instructions)
  `(set! current-word-list (cons
                            (Word ,(symbol->string name)
                                  (for/list ((inst ,(cons 'quote
                                                          (list instructions))))
                                    (let ((s (cond ((symbol? inst)
                                                    (symbol->string inst))
                                                   ;;else: numbers
                                                   (else inst))))
                                      (if (hash-has-key? op-replacements s)
                                          (hash-ref op-replacements s)
                                          s))))
                            current-word-list)))

(define (add-chip chip) (set! chips (cons chip chips)))
(define (get-chips) chips)

(define (write-aforth-file [chip #f] [name "out.aforth"])
  (with-output-to-file name
    (lambda ()
      (printf "( autogenerated code ***do not edit*** chip=~a )\n"
              (GA144-name chip))
      (for ((node (GA144-nodes chip)))
        (printf "\nnode ~a\n" (Node-coord node))
        (for ((word (Node-words node)))
          (printf ": ~a\n" (Word-name word))
          (for ((inst (Word-body word)))
            (printf "~a " inst))
          (printf "\n"))))
    #:exists 'replace))
